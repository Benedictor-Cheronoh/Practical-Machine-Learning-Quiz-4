library(caret)

library(gbm)

set.seed(3433)

library(AppliedPredictiveModeling)

data(AlzheimerDisease)

adData = data.frame(diagnosis,predictors)

inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]

training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
mod_rf <- train(diagnosis ~ ., training, method = "rf")
mod_gbm <- train(diagnosis ~ ., training, method = "gbm", verbose = FALSE)
mod_lda <- train(diagnosis ~ ., training, method = "lda")
rfpred <- predict(mod_rf, testing)
gbmpred <- predict(mod_gbm, testing)
ldapred <- predict(mod_lda, testing)
confusionMatrix(rfpred, testing$diagnosis)$overall['Accuracy']
confusionMatrix(gbmpred, testing$diagnosis)$overall['Accuracy']
combine <- data.frame(rfpred, gbmpred, ldapred, diagnosis = testing$diagnosis)
mod_comb <- train(diagnosis ~ ., combine, method = "rf")
combpred <- predict(mod_comb, testing)
confusionMatrix(testing$diagnosis, combpred)$overall['Accuracy']


data(concrete)

inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]

training = concrete[ inTrain,]

testing = concrete[-inTrain,]
set.seed(233)
modlasso <- train(CompressiveStrength ~ ., training, method = "lasso")
plot.enet(modlasso$finalModel, xvar="penalty", use.color=TRUE)





set.seed(3523)

library(AppliedPredictiveModeling)

data(concrete)

inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]

training = concrete[ inTrain,]

testing = concrete[-inTrain,]


library(lubridate) # For year() function below

dat = read.csv("~/Desktop/gaData.csv")

training = dat[year(dat$date) < 2012,]

testing = dat[(year(dat$date)) > 2011,]
